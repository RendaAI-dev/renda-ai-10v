{
  "name": "PoupeJ√° - Evolution API Node Flow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "poupeja-evolution",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-node-01",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "poupeja-evolution"
    },
    {
      "parameters": {
        "jsCode": "// Processar dados do webhook PoupeJ√°\nconst data = $input.first().body;\nconst { type, user, appointment, transaction, message } = data;\n\n// Normalizar telefone brasileiro\nfunction normalizePhone(phone) {\n  if (!phone) return '';\n  \n  const cleaned = phone.toString().replace(/\\D/g, '');\n  \n  // Se j√° come√ßa com 55, manter\n  if (cleaned.startsWith('55')) {\n    return cleaned;\n  }\n  \n  // Se tem 11 d√≠gitos, adicionar 55\n  if (cleaned.length === 11) {\n    return '55' + cleaned;\n  }\n  \n  // Se tem 10 d√≠gitos, adicionar 55\n  if (cleaned.length === 10) {\n    return '55' + cleaned;\n  }\n  \n  return cleaned;\n}\n\n// Construir mensagem personalizada\nfunction buildMessage() {\n  if (message) {\n    return message;\n  }\n  \n  if (type === 'appointment_reminder' && appointment) {\n    const date = new Date(appointment.date).toLocaleDateString('pt-BR');\n    const time = new Date(appointment.date).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n    \n    return `üóìÔ∏è *Lembrete de Compromisso*\\n\\nOl√° ${user.name}!\\n\\nüìÖ ${appointment.title}\\nüïê ${date} √†s ${time}\\n${appointment.location ? `üìç ${appointment.location}` : ''}\\n\\n‚è∞ Faltam ${appointment.minutesUntil || 30} minutos!\\n\\nüí° *PoupeJ√°*`;\n  }\n  \n  if (type === 'transaction_reminder' && transaction) {\n    const dueDate = new Date(transaction.due_date).toLocaleDateString('pt-BR');\n    const amount = transaction.amount ? `R$ ${transaction.amount.toFixed(2).replace('.', ',')}` : '';\n    \n    return `üí∞ *Lembrete Financeiro*\\n\\nOl√° ${user.name}!\\n\\nüìù ${transaction.title}\\n${amount ? `üíµ ${amount}` : ''}\\nüìÖ Vencimento: ${dueDate}\\n${transaction.description ? `üìã ${transaction.description}` : ''}\\n${transaction.category ? `üè∑Ô∏è ${transaction.category}` : ''}\\n\\nüí° *PoupeJ√°*`;\n  }\n  \n  return `üì≤ *Notifica√ß√£o PoupeJ√°*\\n\\nOl√° ${user.name}!\\n\\n${message || 'Voc√™ tem uma nova notifica√ß√£o do seu assistente financeiro.'}\\n\\nüí° *PoupeJ√°*`;\n}\n\nconst normalizedPhone = normalizePhone(user.phone);\nconst whatsappMessage = buildMessage();\n\nreturn {\n  phone: normalizedPhone,\n  message: whatsappMessage,\n  type: type,\n  user: user,\n  originalData: data\n};"
      },
      "id": "process-notification-01",
      "name": "Process Notification Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-phone",
              "leftValue": "={{ $json.phone }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validate-phone-01",
      "name": "Validate Phone",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "authentication": "evolutionApi",
        "resource": "message",
        "operation": "sendText",
        "instanceName": "={{ $json.evolutionInstance }}",
        "phone": "={{ $json.phone }}",
        "message": "={{ $json.message }}",
        "options": {}
      },
      "id": "evolution-send-01",
      "name": "Evolution API - Send Message",
      "type": "n8n-nodes-base.evolutionApi",
      "typeVersion": 1,
      "position": [1120, 200],
      "credentials": {
        "evolutionApi": {
          "id": "evolution-api-credentials",
          "name": "Evolution API Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Adicionar configura√ß√µes espec√≠ficas da Evolution API\nconst EVOLUTION_INSTANCE = 'sua-instancia';  // ‚ö†Ô∏è CONFIGURE AQUI\nconst EVOLUTION_API_URL = 'https://sua-evolution-api.com';  // ‚ö†Ô∏è CONFIGURE AQUI\n\nconst currentData = $input.first();\n\nreturn {\n  ...currentData,\n  evolutionInstance: EVOLUTION_INSTANCE,\n  evolutionApiUrl: EVOLUTION_API_URL\n};"
      },
      "id": "add-evolution-config-node-01",
      "name": "Add Evolution Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Mensagem WhatsApp enviada com sucesso via Evolution API! ‚úÖ\",\n  \"phone\": \"{{ $('Process Notification Data').item.json.phone }}\",\n  \"type\": \"{{ $('Process Notification Data').item.json.type }}\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "id": "success-response-node-01",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"Telefone inv√°lido ou vazio ‚ùå\",\n  \"phone\": \"{{ $('Process Notification Data').item.json.phone || 'vazio' }}\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "id": "invalid-phone-response-01",
      "name": "Invalid Phone Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"Falha ao enviar mensagem via Evolution API ‚ùå\",\n  \"details\": \"Verifique as credenciais e configura√ß√µes da Evolution API\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "id": "error-response-node-01",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 320]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Process Notification Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Notification Data": {
      "main": [
        [
          {
            "node": "Validate Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Phone": {
      "main": [
        [
          {
            "node": "Add Evolution Config",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invalid Phone Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Evolution Config": {
      "main": [
        [
          {
            "node": "Evolution API - Send Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evolution API - Send Message": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "instanceId": "evolution-api-instance"
  }
}