{
  "name": "PoupeJá - Fluxo Corrigido (Evolution API + WhatsApp)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "poupeja-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "🎯 Webhook PoupeJá",
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [280, 300],
      "webhookId": "poupeja-webhook"
    },
    {
      "parameters": {
        "jsCode": "// ===== PROCESSAMENTO CORRIGIDO DE DADOS POUPEJÁ =====\n\n// Função para normalizar telefone brasileiro\nfunction normalizePhone(phone) {\n  if (!phone) {\n    console.log('❌ Telefone não fornecido');\n    return null;\n  }\n  \n  // Remove todos os caracteres não numéricos\n  let cleanPhone = phone.toString().replace(/\\D/g, '');\n  console.log(`📱 Telefone original: ${phone}, limpo: ${cleanPhone}`);\n  \n  // Remove código do país 55 se presente no início\n  if (cleanPhone.startsWith('55') && cleanPhone.length > 11) {\n    cleanPhone = cleanPhone.substring(2);\n    console.log(`🇧🇷 Removido código 55: ${cleanPhone}`);\n  }\n  \n  // Adiciona nono dígito se necessário (DDD + 8 dígitos = 10 total)\n  if (cleanPhone.length === 10) {\n    // Adiciona 9 após o DDD para celulares\n    cleanPhone = cleanPhone.substring(0, 2) + '9' + cleanPhone.substring(2);\n    console.log(`📱 Adicionado 9º dígito: ${cleanPhone}`);\n  }\n  \n  // Adiciona código do país\n  if (cleanPhone.length === 11) {\n    cleanPhone = '55' + cleanPhone;\n    console.log(`🌍 Adicionado código do país: ${cleanPhone}`);\n  }\n  \n  // Validação final\n  if (cleanPhone.length !== 13) {\n    console.log(`❌ Telefone inválido após normalização: ${cleanPhone} (${cleanPhone.length} dígitos)`);\n    return null;\n  }\n  \n  console.log(`✅ Telefone normalizado com sucesso: ${cleanPhone}`);\n  return cleanPhone;\n}\n\n// Função para construir mensagem WhatsApp\nfunction buildWhatsAppMessage(data) {\n  const { type, user, data: eventData, message } = data;\n  const userName = user?.name || 'Usuário';\n  \n  console.log(`📝 Construindo mensagem para evento: ${type}`);\n  \n  // Se já tiver mensagem pronta, usar ela\n  if (message) {\n    console.log('💬 Usando mensagem pré-definida');\n    return message;\n  }\n  \n  // Construir mensagem baseada no tipo de evento\n  switch (type) {\n    case 'appointment_reminder':\n    case 'appointment_created':\n      if (eventData?.title) {\n        const date = eventData.date ? new Date(eventData.date).toLocaleDateString('pt-BR') : 'Data não informada';\n        const time = eventData.date ? new Date(eventData.date).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }) : '';\n        return `🗓️ *Lembrete de Compromisso*\\n\\nOlá ${userName}!\\n\\n📅 **${eventData.title}**\\n🕐 ${date}${time ? ` às ${time}` : ''}\\n${eventData.location ? `📍 ${eventData.location}` : ''}\\n\\n💡 *PoupeJá - Seu Organizador Pessoal*`;\n      }\n      break;\n      \n    case 'transaction_reminder':\n    case 'transaction_due':\n      if (eventData?.title) {\n        const amount = eventData.amount ? `R$ ${Number(eventData.amount).toFixed(2).replace('.', ',')}` : '';\n        const date = eventData.date ? new Date(eventData.date).toLocaleDateString('pt-BR') : 'Data não informada';\n        return `💰 *Lembrete Financeiro*\\n\\nOlá ${userName}!\\n\\n📝 **${eventData.title}**\\n${amount ? `💵 ${amount}` : ''}\\n📅 Vencimento: ${date}\\n${eventData.description ? `📋 ${eventData.description}` : ''}\\n\\n💡 *PoupeJá - Seu Assistente Financeiro*`;\n      }\n      break;\n      \n    case 'goal_progress':\n    case 'goal_achieved':\n      if (eventData?.title) {\n        const current = eventData.amount ? `R$ ${Number(eventData.amount).toFixed(2).replace('.', ',')}` : 'R$ 0,00';\n        const progress = eventData.metadata?.progress_percent || 0;\n        return `🎯 *Progresso da Meta*\\n\\nOlá ${userName}!\\n\\n🏆 **${eventData.title}**\\n💰 Valor atual: ${current}\\n📊 Progresso: ${progress}%\\n\\n${type === 'goal_achieved' ? '🎉 **PARABÉNS! Meta atingida!**' : '⭐ Continue assim!'}\\n\\n💡 *PoupeJá - Seus Objetivos*`;\n      }\n      break;\n      \n    case 'budget_exceeded':\n      if (eventData?.title) {\n        const exceeded = eventData.amount ? `R$ ${Number(eventData.amount).toFixed(2).replace('.', ',')}` : 'R$ 0,00';\n        return `⚠️ *Orçamento Excedido*\\n\\nOlá ${userName}!\\n\\n📊 **${eventData.title}**\\n💸 Valor excedido: ${exceeded}\\n📈 Revise seus gastos para o período.\\n\\n💡 *PoupeJá - Controle Financeiro*`;\n      }\n      break;\n      \n    case 'custom':\n    default:\n      const title = eventData?.title || 'Notificação';\n      const description = eventData?.description || 'Você tem uma nova notificação do PoupeJá.';\n      return `📱 *${title}*\\n\\nOlá ${userName}!\\n\\n${description}\\n\\n💡 *PoupeJá*`;\n  }\n  \n  // Fallback se não conseguir construir mensagem específica\n  return `📱 *Notificação PoupeJá*\\n\\nOlá ${userName}!\\n\\nVocê tem uma nova notificação.\\n\\n💡 *PoupeJá*`;\n}\n\n// ===== PROCESSAMENTO PRINCIPAL =====\n\ntry {\n  // Pegar dados do webhook\n  const webhookData = $input.first().body;\n  console.log('📥 Dados recebidos:', JSON.stringify(webhookData, null, 2));\n  \n  // Validação básica\n  if (!webhookData || typeof webhookData !== 'object') {\n    throw new Error('Dados do webhook inválidos ou ausentes');\n  }\n  \n  // Extrair informações principais\n  const { type, user, data: eventData, message, metadata } = webhookData;\n  \n  if (!user) {\n    throw new Error('Informações do usuário não fornecidas');\n  }\n  \n  console.log(`👤 Usuário: ${user.name || 'Nome não informado'} (${user.email || 'Email não informado'})`);\n  console.log(`📞 Telefone original: ${user.phone || 'Não informado'}`);\n  \n  // Normalizar telefone\n  const normalizedPhone = normalizePhone(user.phone);\n  \n  if (!normalizedPhone) {\n    console.log('❌ Telefone inválido - WhatsApp será ignorado');\n    return {\n      success: false,\n      error: 'Telefone inválido',\n      phone: user.phone,\n      shouldSend: false,\n      user: user,\n      type: type\n    };\n  }\n  \n  // Construir mensagem\n  const whatsappMessage = buildWhatsAppMessage(webhookData);\n  console.log('💬 Mensagem construída:', whatsappMessage.substring(0, 100) + '...');\n  \n  // Configurações da Evolution API (usar do metadata se disponível)\n  const evolutionConfig = {\n    apiUrl: metadata?.evolutionApi?.apiUrl || 'https://sua-evolution-api.com',\n    apiKey: metadata?.evolutionApi?.apiKey || 'sua-api-key-aqui',\n    instance: metadata?.evolutionApi?.instance || 'sua-instancia'\n  };\n  \n  console.log(`🔧 Configuração Evolution API: ${evolutionConfig.apiUrl}/${evolutionConfig.instance}`);\n  \n  // Resultado final\n  const result = {\n    success: true,\n    shouldSend: true,\n    phone: normalizedPhone,\n    message: whatsappMessage,\n    user: {\n      ...user,\n      phone: normalizedPhone\n    },\n    type: type || 'unknown',\n    evolutionConfig: evolutionConfig,\n    originalData: webhookData,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log('✅ Processamento concluído com sucesso');\n  return result;\n  \n} catch (error) {\n  console.log('❌ Erro no processamento:', error.message);\n  console.log('🔍 Stack trace:', error.stack);\n  \n  return {\n    success: false,\n    error: error.message,\n    shouldSend: false,\n    timestamp: new Date().toISOString(),\n    originalData: $input.first().body\n  };\n}"
      },
      "id": "process-data",
      "name": "⚙️ Processar Dados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [520, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-success",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            },
            {
              "id": "condition-send",
              "leftValue": "={{ $json.shouldSend }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "validate-data",
      "name": "✅ Dados Válidos?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [760, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.evolutionConfig.apiUrl }}/message/sendText/{{ $json.evolutionConfig.instance }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "apikey",
              "value": "={{ $json.evolutionConfig.apiKey }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={\\n  \"number\": $json.phone,\\n  \"textMessage\": {\\n    \"text\": $json.message\\n  }\\n}",
        "options": {
          "timeout": 30000,
          "redirect": {
            "redirect": {}
          }
        }
      },
      "id": "send-whatsapp",
      "name": "📲 Enviar WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log de sucesso detalhado\nconst data = $input.first().json;\n\nconsole.log('🎉 SUCESSO - WhatsApp enviado!');\nconsole.log(`👤 Usuário: ${data.user?.name}`);\nconsole.log(`📞 Telefone: ${data.phone}`);\nconsole.log(`📧 Email: ${data.user?.email}`);\nconsole.log(`📅 Tipo: ${data.type}`);\nconsole.log(`⏰ Timestamp: ${data.timestamp}`);\n\n// Retornar dados para resposta\nreturn {\n  success: true,\n  status: 'sent',\n  user: data.user?.name,\n  phone: data.phone,\n  type: data.type,\n  timestamp: data.timestamp\n};"
      },
      "id": "log-success",
      "name": "📝 Log Sucesso",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \"success\": true,\\n  \"message\": \"Mensagem WhatsApp enviada com sucesso! ✅\",\\n  \"data\": {\\n    \"user\": $json.user,\\n    \"phone\": $json.phone,\\n    \"type\": $json.type,\\n    \"timestamp\": $json.timestamp\\n  }\\n}",
        "options": {}
      },
      "id": "success-response",
      "name": "✅ Sucesso",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1480, 200]
    },
    {
      "parameters": {
        "jsCode": "// Log de erro detalhado\nconst data = $input.first().json;\n\nconsole.log('❌ ERRO - Dados inválidos!');\nconsole.log(`🔍 Erro: ${data.error || 'Dados inválidos'}`);\nconsole.log(`📞 Telefone: ${data.phone || 'não fornecido'}`);\nconsole.log(`👤 Usuário: ${data.user?.name || 'não fornecido'}`);\nconsole.log(`📧 Email: ${data.user?.email || 'não fornecido'}`);\nconsole.log(`📄 Dados originais:`, JSON.stringify(data.originalData, null, 2));\n\n// Retornar dados para resposta de erro\nreturn {\n  success: false,\n  error: data.error || 'Dados inválidos',\n  phone: data.phone,\n  user: data.user?.name,\n  timestamp: data.timestamp\n};"
      },
      "id": "log-error",
      "name": "📝 Log Erro",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \"success\": false,\\n  \"message\": \"Falha no processamento dos dados ❌\",\\n  \"error\": $json.error,\\n  \"data\": {\\n    \"phone\": $json.phone,\\n    \"user\": $json.user,\\n    \"timestamp\": $json.timestamp\\n  }\\n}",
        "options": {}
      },
      "id": "error-response",
      "name": "❌ Erro",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1240, 400]
    },
    {
      "parameters": {
        "jsCode": "// Log de erro de envio\nconst originalData = $input.first().json;\nconst httpError = $input.first().error;\n\nconsole.log('❌ ERRO DE ENVIO - WhatsApp falhou!');\nconsole.log(`🔍 Erro HTTP:`, httpError?.message || 'Erro desconhecido');\nconsole.log(`📞 Telefone: ${originalData.phone}`);\nconsole.log(`👤 Usuário: ${originalData.user?.name}`);\nconsole.log(`🔧 URL da API: ${originalData.evolutionConfig?.apiUrl}`);\nconsole.log(`🏷️ Instância: ${originalData.evolutionConfig?.instance}`);\n\n// Retornar dados para resposta de erro de envio\nreturn {\n  success: false,\n  error: 'Falha ao enviar WhatsApp',\n  details: httpError?.message || 'Erro na comunicação com Evolution API',\n  phone: originalData.phone,\n  user: originalData.user?.name,\n  apiUrl: originalData.evolutionConfig?.apiUrl,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "log-send-error",
      "name": "📝 Log Erro Envio",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\\n  \"success\": false,\\n  \"message\": \"Falha ao enviar WhatsApp ❌\",\\n  \"error\": $json.error,\\n  \"details\": $json.details,\\n  \"data\": {\\n    \"phone\": $json.phone,\\n    \"user\": $json.user,\\n    \"apiUrl\": $json.apiUrl,\\n    \"timestamp\": $json.timestamp\\n  }\\n}",
        "options": {}
      },
      "id": "send-error-response",
      "name": "❌ Erro Envio",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1480, 300]
    }
  ],
  "connections": {
    "🎯 Webhook PoupeJá": {
      "main": [
        [
          {
            "node": "⚙️ Processar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "⚙️ Processar Dados": {
      "main": [
        [
          {
            "node": "✅ Dados Válidos?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "✅ Dados Válidos?": {
      "main": [
        [
          {
            "node": "📲 Enviar WhatsApp",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "📝 Log Erro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📲 Enviar WhatsApp": {
      "main": [
        [
          {
            "node": "📝 Log Sucesso",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "📝 Log Erro Envio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📝 Log Sucesso": {
      "main": [
        [
          {
            "node": "✅ Sucesso",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📝 Log Erro": {
      "main": [
        [
          {
            "node": "❌ Erro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "📝 Log Erro Envio": {
      "main": [
        [
          {
            "node": "❌ Erro Envio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["poupeja", "whatsapp", "evolution-api"],
  "triggerCount": 1,
  "updatedAt": "2025-01-01T00:00:00.000Z",
  "versionId": "2.0.0"
}