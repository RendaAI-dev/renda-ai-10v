{
  "name": "PoupeJ√° - Evolution API Webhook Flow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "poupeja-whatsapp",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger-01",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhookTrigger",
      "typeVersion": 1,
      "position": [260, 300],
      "webhookId": "poupeja-whatsapp"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"body\"][\"type\"]}}",
              "operation": "equal",
              "value2": "appointment_reminder"
            }
          ]
        }
      },
      "id": "if-appointment-01",
      "name": "If Appointment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [480, 200]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"body\"][\"type\"]}}",
              "operation": "equal",
              "value2": "transaction_reminder"
            }
          ]
        }
      },
      "id": "if-transaction-01",
      "name": "If Transaction",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [480, 400]
    },
    {
      "parameters": {
        "functionCode": "const data = items[0].json.body;\nconst { user, appointment } = data;\n\n// Normalizar telefone\nlet phone = user.phone.toString().replace(/\\D/g, '');\nif (!phone.startsWith('55')) {\n  phone = '55' + phone;\n}\n\n// Formatar data\nconst appointmentDate = new Date(appointment.date);\nconst dateStr = appointmentDate.toLocaleDateString('pt-BR');\nconst timeStr = appointmentDate.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });\n\n// Construir mensagem\nconst message = `üóìÔ∏è *Lembrete de Compromisso*\\n\\nOl√° ${user.name}!\\n\\nüìÖ ${appointment.title}\\nüïê ${dateStr} √†s ${timeStr}\\n${appointment.location ? `üìç ${appointment.location}` : ''}\\n\\nüí° *PoupeJ√° - Seu assistente pessoal*`;\n\nreturn [{\n  json: {\n    phone: phone,\n    message: message,\n    originalData: data\n  }\n}];"
      },
      "id": "process-appointment-01",
      "name": "Process Appointment",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [700, 100]
    },
    {
      "parameters": {
        "functionCode": "const data = items[0].json.body;\nconst { user, transaction } = data;\n\n// Normalizar telefone\nlet phone = user.phone.toString().replace(/\\D/g, '');\nif (!phone.startsWith('55')) {\n  phone = '55' + phone;\n}\n\n// Formatar data de vencimento\nconst dueDate = new Date(transaction.due_date);\nconst dueDateStr = dueDate.toLocaleDateString('pt-BR');\n\n// Formatar valor\nconst amount = transaction.amount ? `R$ ${transaction.amount.toFixed(2).replace('.', ',')}` : '';\n\n// Construir mensagem\nconst message = `üí∞ *Lembrete Financeiro*\\n\\nOl√° ${user.name}!\\n\\nüìù ${transaction.title}\\n${amount ? `üíµ ${amount}` : ''}\\nüìÖ Vencimento: ${dueDateStr}\\n${transaction.description ? `üìã ${transaction.description}` : ''}\\n\\nüí° *PoupeJ√° - Seu assistente financeiro*`;\n\nreturn [{\n  json: {\n    phone: phone,\n    message: message,\n    originalData: data\n  }\n}];"
      },
      "id": "process-transaction-01",
      "name": "Process Transaction",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [700, 500]
    },
    {
      "parameters": {
        "functionCode": "// Adicionar configura√ß√µes da Evolution API\nconst EVOLUTION_API_URL = 'https://sua-evolution-api.com';  // ‚ö†Ô∏è CONFIGURE AQUI\nconst EVOLUTION_INSTANCE = 'sua-instancia';                // ‚ö†Ô∏è CONFIGURE AQUI\n\nconst currentData = items[0].json;\n\nreturn [{\n  json: {\n    ...currentData,\n    evolutionApiUrl: EVOLUTION_API_URL,\n    evolutionInstance: EVOLUTION_INSTANCE\n  }\n}];"
      },
      "id": "add-evolution-config-01",
      "name": "Add Evolution Config",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [920, 300]
    },
    {
      "parameters": {
        "url": "={{$json.evolutionApiUrl}}/message/sendText/{{$json.evolutionInstance}}",
        "authentication": "headerAuth",
        "headerAuth": {
          "name": "apikey",
          "value": "sua-api-key-aqui"
        },
        "requestMethod": "POST",
        "jsonParameters": true,
        "bodyParametersJson": "={\n  \"number\": \"{{$json.phone}}\",\n  \"textMessage\": {\n    \"text\": \"{{$json.message}}\"\n  }\n}",
        "options": {}
      },
      "id": "send-whatsapp-01",
      "name": "Send WhatsApp Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1140, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Mensagem WhatsApp enviada com sucesso!\",\n  \"phone\": \"{{$json.phone}}\",\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "id": "success-response-01",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"error\": \"Falha ao enviar mensagem WhatsApp\",\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "id": "error-response-01",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1360, 450]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "If Appointment",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Appointment": {
      "main": [
        [
          {
            "node": "Process Appointment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Transaction": {
      "main": [
        [
          {
            "node": "Process Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Appointment": {
      "main": [
        [
          {
            "node": "Add Evolution Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Transaction": {
      "main": [
        [
          {
            "node": "Add Evolution Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Evolution Config": {
      "main": [
        [
          {
            "node": "Send WhatsApp Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send WhatsApp Message": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0"
}